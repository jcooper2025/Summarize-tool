"""
This is code generated by ChatGPT.
I gave it the following prompt:
Create the python code (using tkinter) for a GUI interface to an application that allows the user to load a file or video link and then display a summary of the text in a scrollable text box. 
There should be a Load button, a button for the video  on the left side of the application window. A text box to display the file name next to the load button. 
There is a submit button below the load and video button.
Below those buttons will be a scrollable text box as wide as the application window to display the summary. At the bottom left will be the Save button. At the bottom right will be a Cancel/Close button.
There is a single menu labeled 'File' with the menu selections for Load, Video, Submit, Save and Close.

"""
import tkinter as tk
from tkinter import filedialog, messagebox

def load_file():
    file_path = filedialog.askopenfilename(filetypes=[("Text Files", "*.txt")])
    if file_path:
        file_name.set(file_path)

def load_video():
    video_link = filedialog.askstring("Video Link", "Enter video link:")
    if video_link:
        # Process the video link as needed
        pass

def submit():
    summary = ""  # Perform text summarization here based on the loaded file or video
    text_summary.delete("1.0", tk.END)
    text_summary.insert(tk.END, summary)

def save_summary():
    summary_text = text_summary.get("1.0", tk.END)
    # Perform save operation for the summary text

def close_window():
    if messagebox.askyesno("Close", "Are you sure you want to close?"):
        window.destroy()

# Create the main window
window = tk.Tk()
window.title("Text Summary Application")

# File menu
menu_bar = tk.Menu(window)
file_menu = tk.Menu(menu_bar, tearoff=0)
file_menu.add_command(label="Load", command=load_file)
file_menu.add_command(label="Video", command=load_video)
file_menu.add_command(label="Submit", command=submit)
file_menu.add_command(label="Save", command=save_summary)
file_menu.add_separator()
file_menu.add_command(label="Close", command=close_window)
menu_bar.add_cascade(label="File", menu=file_menu)
window.config(menu=menu_bar)

# Load button and file name display
file_name = tk.StringVar()
load_button = tk.Button(window, text="Load", command=load_file)
load_button.grid(row=0, column=0)
file_label = tk.Label(window, textvariable=file_name)
file_label.grid(row=0, column=1)

# Video button
video_button = tk.Button(window, text="Video", command=load_video)
video_button.grid(row=0, column=2)

# Submit button
submit_button = tk.Button(window, text="Submit", command=submit)
submit_button.grid(row=1, column=0, pady=10)

# Summary text box
text_summary = tk.Text(window, height=20, width=80)
text_summary.grid(row=2, column=0, columnspan=3, padx=10, pady=5)

# Save button
save_button = tk.Button(window, text="Save", command=save_summary)
save_button.grid(row=3, column=0, padx=10, pady=10, sticky="w")

# Close button
close_button = tk.Button(window, text="Close", command=close_window)
close_button.grid(row=3, column=2, padx=10, pady=10, sticky="e")

# Run the GUI event loop
window.mainloop()
